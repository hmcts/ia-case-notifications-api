buildscript {
    repositories {
        jcenter()
    }
    dependencies {

        classpath("net.serenity-bdd:serenity-gradle-plugin:3.6.22")
        classpath("au.com.dius.pact:au.com.dius.pact.gradle.plugin:4.4.0-beta.1")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.50.0'
    id 'info.solidsoft.pitest' version '1.9.11'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.owasp.dependencycheck' version '9.0.4'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'org.springframework.boot' version '2.7.18'
    id 'uk.gov.hmcts.java' version '0.12.50'
    id 'io.freefair.lombok' version '6.2.0'
    id 'au.com.dius.pact' version '4.2.14'
    id "name.remal.randomize-test-classes" version "1.5.0"
    id 'org.gradle.test-retry' version '1.5.8'
}

apply plugin: 'java'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"
apply plugin: 'project-report'
apply plugin: 'idea'

def versions = [
        jupiter            : '5.8.2',
        junitPlatform      : '1.10.1',
        gradlePitest       : '1.15.0',
        pact_version       : '4.1.38',
        pitest             : '1.15.3',
        reformLogging      : '5.1.7',
        reformHealthStarter: '0.0.5',
        restAssured        : '5.3.2',
        serenity           : '3.9.8',
        sonarPitest        : '0.5',
        springHystrix      : '2.2.10.RELEASE',
        springDoc          : '1.7.0',
        springCloud        : '3.1.6'
]

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
                "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
        ]
]

mainClassName = 'uk.gov.hmcts.reform.iacasenotificationsapi.Application'
def jarName = 'ia-case-notifications-api.jar'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

sourceSets {

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

processFunctionalTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
        testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
        testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
        testResourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
}

checkstyle {
    maxWarnings = 0
    toolVersion = '10.12.5'
    setConfigFile(new File(rootDir, 'config/checkstyle/checkstyle.xml'))
}

pmd {
    toolVersion = '6.55.0'
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            'category/java/errorprone.xml',
            'category/java/bestpractices.xml'
    ]
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    systemProperty "scenario", System.getProperty('scenario')

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task fortifyScan(type: JavaExec, description: 'Run fortify scan.')  {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        xml.getOutputLocation().set(file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    }
}

pitest {
    print('./gradlew --version'.execute().text.trim())
    junit5PluginVersion = '1.1.2'
    targetClasses = ['uk.gov.hmcts.reform.iacasenotificationsapi.*']
    excludedClasses = [
            'uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.config.*',
            'uk.gov.hmcts.reform.iacasenotificationsapi.Application',
            'uk.gov.hmcts.reform.iacasenotificationsapi.CcdScenarioRunnerTest'
    ]
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    failWhenNoMutations = false
    verbose = true
    mutationThreshold = 90
}

project.tasks['pitest'].group = "Verification"

project.ext {
    pacticipant = 'ia_caseNotificationsApi'
    pacticipantVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task runContractTests(type: Test, description: 'Runs contract tests.', group: 'Verification') {
    onlyIf {
        return System.env.SKIP_CONTRACT_TESTS == null || System.env.SKIP_CONTRACT_TESTS == 'false'
    }
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
    testLogging.showStandardStreams = true

}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
    logger.lifecycle("Runs pact consumer Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    }
    publish {
        pactDirectory = 'pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pacticipantVersion
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "IA :: Immigration & Asylum case notifications api"
        property "sonar.projectKey", "IACASENOTIFICATIONSAPI"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
        property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/**," +
                "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/SystemDateProvider.java," +
                "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/Application.java"
        property "sonar.cpd.exclusions", "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/AsylumCase.java," +
                "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/AsylumCaseBuilder.java," +
                "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/**"

    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()

    maven {
        url 'https://www.jitpack.io'
    }
}

dependencyManagement {
    dependencies {

        dependencySet(group: 'org.yaml', version: '2.2') {
            entry 'snakeyaml'
        }

        dependencySet(group: 'commons-fileupload', version: '1.5') {
            entry 'commons-fileupload'
        }

        dependencySet(group: 'com.fasterxml.jackson.core', version: '2.16.0') {
            entry 'jackson-databind'
            entry 'jackson-core'
            entry 'jackson-annotations'
        }

        dependencySet(group: 'com.fasterxml.jackson.dataformat', version: '2.16.0') {
            entry 'jackson-dataformat-yaml'
            entry 'jackson-dataformat-csv'
        }

        dependencySet(group: 'com.fasterxml.jackson.datatype', version: '2.16.0') {
            entry 'jackson-datatype-jsr310'
            entry 'jackson-datatype-jdk8'
        }

    }
}

dependencies {
    modules {
        module("org.codehaus.groovy:groovy") {
            replacedBy("org.apache.groovy:groovy", "conflicts in current rest-assured version")
        }
        module("org.codehaus.groovy:groovy-xml") {
            replacedBy("org.apache.groovy:groovy-xml", "conflicts in current rest-assured version")
        }
        module("org.codehaus.groovy:groovy-json") {
            replacedBy("org.apache.groovy:groovy-json", "conflicts in current rest-assured version")
        }
    }
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springCloud
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: versions.springCloud
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'

    // CVE-2019-17195
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.37.2'

    // CVE-2021-27568
    implementation group: 'net.minidev', name: 'json-smart', version: '2.5.0'

    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.9.3'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.13'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.13'

    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.83'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.83'

    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.9'

    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.4'
//    implementation group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealthStarter

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'

    implementation 'ch.qos.logback:logback-classic:1.2.13'
    implementation 'ch.qos.logback:logback-core:1.2.13'

    implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.19.2-RELEASE'

    implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

    implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.2.1'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.16.1'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }

    testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    testImplementation "info.solidsoft.gradle.pitest:gradle-pitest-plugin:${versions.gradlePitest}"
    testImplementation "org.codehaus.sonar-plugins:sonar-pitest-plugin:${versions.sonarPitest}"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'

    testImplementation(group: 'io.rest-assured', name: 'rest-assured-all', version: versions.restAssured)
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured

    testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.3.0', classifier: 'all', {
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }

    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'

    testImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '3.1.6') {
        exclude group: "com.github.tomakehurst", module: "wiremock-standalone"
    }

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath

    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
    contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
    contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version : versions.junit
    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath
}

dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

gradle.startParameter.continueOnFailure = true

bootJar {
    getArchiveFileName().set(jarName)
    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues.
// this setting only applies when running via gradle bootRun -- see web.config for the
// java flag that configures the deployed appllications
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8", "-Dhttps.protocols=TLSv1.2"]

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

